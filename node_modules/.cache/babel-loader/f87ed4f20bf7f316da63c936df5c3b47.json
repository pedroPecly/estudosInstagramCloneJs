{"ast":null,"code":"import firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { __awaiter, __generator, __assign } from 'tslib';\nimport { ErrorFactory, FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { LogLevel, Logger } from '@firebase/logger';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\r\n *\r\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\r\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\r\n * Cache API doesn't support matching entries by time.\r\n */\nvar CachingClient = /** @class */function () {\n  function CachingClient(client, storage, storageCache, logger) {\n    this.client = client;\n    this.storage = storage;\n    this.storageCache = storageCache;\n    this.logger = logger;\n  }\n  /**\r\n   * Returns true if the age of the cached fetched configs is less than or equal to\r\n   * {@link Settings#minimumFetchIntervalInSeconds}.\r\n   *\r\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\r\n   * native Fetch API.\r\n   *\r\n   * <p>Visible for testing.\r\n   */\n  CachingClient.prototype.isCachedDataFresh = function (cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n    // Calculates age of cache entry.\n    var cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n    var isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n    this.logger.debug('Config fetch cache check.' + (\" Cache age millis: \" + cacheAgeMillis + \".\") + (\" Cache max age millis (minimumFetchIntervalMillis setting): \" + cacheMaxAgeMillis + \".\") + (\" Is cache hit: \" + isCachedDataFresh + \".\"));\n    return isCachedDataFresh;\n  };\n  CachingClient.prototype.fetch = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse, response, storageOperations;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Promise.all([this.storage.getLastSuccessfulFetchTimestampMillis(), this.storage.getLastSuccessfulFetchResponse()])];\n          case 1:\n            _a = _b.sent(), lastSuccessfulFetchTimestampMillis = _a[0], lastSuccessfulFetchResponse = _a[1];\n            // Exits early on cache hit.\n            if (lastSuccessfulFetchResponse && this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {\n              return [2 /*return*/, lastSuccessfulFetchResponse];\n            }\n            // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n            // that allows the caller to pass an ETag.\n            request.eTag = lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n            return [4 /*yield*/, this.client.fetch(request)];\n          case 2:\n            response = _b.sent();\n            storageOperations = [\n            // Uses write-through cache for consistency with synchronous public API.\n            this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())];\n            if (response.status === 200) {\n              // Caches response only if it has changed, ie non-304 responses.\n              storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));\n            }\n            return [4 /*yield*/, Promise.all(storageOperations)];\n          case 3:\n            _b.sent();\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  return CachingClient;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\nvar ERROR_DESCRIPTION_MAP = (_a = {}, _a[\"registration-window\" /* REGISTRATION_WINDOW */] = 'Undefined window object. This SDK only supports usage in a browser environment.', _a[\"registration-project-id\" /* REGISTRATION_PROJECT_ID */] = 'Undefined project identifier. Check Firebase app initialization.', _a[\"registration-api-key\" /* REGISTRATION_API_KEY */] = 'Undefined API key. Check Firebase app initialization.', _a[\"registration-app-id\" /* REGISTRATION_APP_ID */] = 'Undefined app identifier. Check Firebase app initialization.', _a[\"storage-open\" /* STORAGE_OPEN */] = 'Error thrown when opening storage. Original error: {$originalErrorMessage}.', _a[\"storage-get\" /* STORAGE_GET */] = 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.', _a[\"storage-set\" /* STORAGE_SET */] = 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.', _a[\"storage-delete\" /* STORAGE_DELETE */] = 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.', _a[\"fetch-client-network\" /* FETCH_NETWORK */] = 'Fetch client failed to connect to a network. Check Internet connection.' + ' Original error: {$originalErrorMessage}.', _a[\"fetch-timeout\" /* FETCH_TIMEOUT */] = 'The config fetch request timed out. ' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.', _a[\"fetch-throttle\" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.', _a[\"fetch-client-parse\" /* FETCH_PARSE */] = 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.', _a[\"fetch-status\" /* FETCH_STATUS */] = 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.', _a);\nvar ERROR_FACTORY = new ErrorFactory('remoteconfig' /* service */, 'Remote Config' /* service name */, ERROR_DESCRIPTION_MAP);\n// Note how this is like typeof/instanceof, but for ErrorCode.\nfunction hasErrorCode(e, errorCode) {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Attempts to get the most accurate browser language setting.\r\n *\r\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\r\n *\r\n * <p>Defers default language specification to server logic for consistency.\r\n *\r\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\r\n */\nfunction getUserLanguage(navigatorLanguage) {\n  if (navigatorLanguage === void 0) {\n    navigatorLanguage = navigator;\n  }\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Implements the Client abstraction for the Remote Config REST API.\r\n */\nvar RestClient = /** @class */function () {\n  function RestClient(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {\n    this.firebaseInstallations = firebaseInstallations;\n    this.sdkVersion = sdkVersion;\n    this.namespace = namespace;\n    this.projectId = projectId;\n    this.apiKey = apiKey;\n    this.appId = appId;\n  }\n  /**\r\n   * Fetches from the Remote Config REST API.\r\n   *\r\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\r\n   * connect to the network.\r\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\r\n   * fetch response.\r\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\r\n   */\n  RestClient.prototype.fetch = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, installationId, installationToken, urlBase, url, headers, requestBody, options, fetchPromise, timeoutPromise, response, originalError_1, errorCode, status, responseEtag, config, state, responseBody, originalError_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Promise.all([this.firebaseInstallations.getId(), this.firebaseInstallations.getToken()])];\n          case 1:\n            _a = _b.sent(), installationId = _a[0], installationToken = _a[1];\n            urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';\n            url = urlBase + \"/v1/projects/\" + this.projectId + \"/namespaces/\" + this.namespace + \":fetch?key=\" + this.apiKey;\n            headers = {\n              'Content-Type': 'application/json',\n              'Content-Encoding': 'gzip',\n              // Deviates from pure decorator by not passing max-age header since we don't currently have\n              // service behavior using that header.\n              'If-None-Match': request.eTag || '*'\n            };\n            requestBody = {\n              /* eslint-disable camelcase */\n              sdk_version: this.sdkVersion,\n              app_instance_id: installationId,\n              app_instance_id_token: installationToken,\n              app_id: this.appId,\n              language_code: getUserLanguage()\n              /* eslint-enable camelcase */\n            };\n            options = {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify(requestBody)\n            };\n            fetchPromise = fetch(url, options);\n            timeoutPromise = new Promise(function (_resolve, reject) {\n              // Maps async event listener to Promise API.\n              request.signal.addEventListener(function () {\n                // Emulates https://heycam.github.io/webidl/#aborterror\n                var error = new Error('The operation was aborted.');\n                error.name = 'AbortError';\n                reject(error);\n              });\n            });\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 5,, 6]);\n            return [4 /*yield*/, Promise.race([fetchPromise, timeoutPromise])];\n          case 3:\n            _b.sent();\n            return [4 /*yield*/, fetchPromise];\n          case 4:\n            response = _b.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            originalError_1 = _b.sent();\n            errorCode = \"fetch-client-network\" /* FETCH_NETWORK */;\n            if (originalError_1.name === 'AbortError') {\n              errorCode = \"fetch-timeout\" /* FETCH_TIMEOUT */;\n            }\n            throw ERROR_FACTORY.create(errorCode, {\n              originalErrorMessage: originalError_1.message\n            });\n          case 6:\n            status = response.status;\n            responseEtag = response.headers.get('ETag') || undefined;\n            if (!(response.status === 200)) return [3 /*break*/, 11];\n            responseBody = void 0;\n            _b.label = 7;\n          case 7:\n            _b.trys.push([7, 9,, 10]);\n            return [4 /*yield*/, response.json()];\n          case 8:\n            responseBody = _b.sent();\n            return [3 /*break*/, 10];\n          case 9:\n            originalError_2 = _b.sent();\n            throw ERROR_FACTORY.create(\"fetch-client-parse\" /* FETCH_PARSE */, {\n              originalErrorMessage: originalError_2.message\n            });\n          case 10:\n            config = responseBody['entries'];\n            state = responseBody['state'];\n            _b.label = 11;\n          case 11:\n            // Normalizes based on legacy state.\n            if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n              status = 500;\n            } else if (state === 'NO_CHANGE') {\n              status = 304;\n            } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n              // These cases can be fixed remotely, so normalize to safe value.\n              config = {};\n            }\n            // Normalize to exception-based control flow for non-success cases.\n            // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n            // differentiating success states (200 from 304; the state body param is undefined in a\n            // standard 304).\n            if (status !== 304 && status !== 200) {\n              throw ERROR_FACTORY.create(\"fetch-status\" /* FETCH_STATUS */, {\n                httpStatus: status\n              });\n            }\n            return [2 /*return*/, {\n              status: status,\n              eTag: responseEtag,\n              config: config\n            }];\n        }\n      });\n    });\n  };\n  return RestClient;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Shims a minimal AbortSignal.\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\nvar RemoteConfigAbortSignal = /** @class */function () {\n  function RemoteConfigAbortSignal() {\n    this.listeners = [];\n  }\n  RemoteConfigAbortSignal.prototype.addEventListener = function (listener) {\n    this.listeners.push(listener);\n  };\n  RemoteConfigAbortSignal.prototype.abort = function () {\n    this.listeners.forEach(function (listener) {\n      return listener();\n    });\n  };\n  return RemoteConfigAbortSignal;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_VALUE_FOR_BOOLEAN = false;\nvar DEFAULT_VALUE_FOR_STRING = '';\nvar DEFAULT_VALUE_FOR_NUMBER = 0;\nvar BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\nvar Value = /** @class */function () {\n  function Value(_source, _value) {\n    if (_value === void 0) {\n      _value = DEFAULT_VALUE_FOR_STRING;\n    }\n    this._source = _source;\n    this._value = _value;\n  }\n  Value.prototype.asString = function () {\n    return this._value;\n  };\n  Value.prototype.asBoolean = function () {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  };\n  Value.prototype.asNumber = function () {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    var num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  };\n  Value.prototype.getSource = function () {\n    return this._source;\n  };\n  return Value;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nvar DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n/**\r\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\r\n *\r\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\r\n */\nvar RemoteConfig = /** @class */function () {\n  function RemoteConfig(\n  // Required by FirebaseServiceFactory interface.\n  app,\n  // JS doesn't support private yet\n  // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n  // underscore prefix.\n  _client, _storageCache, _storage, _logger) {\n    this.app = app;\n    this._client = _client;\n    this._storageCache = _storageCache;\n    this._storage = _storage;\n    this._logger = _logger;\n    // Tracks completion of initialization promise.\n    this._isInitializationComplete = false;\n    this.settings = {\n      fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n      minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n    };\n    this.defaultConfig = {};\n  }\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  RemoteConfig.prototype.setLogLevel = function (logLevel) {\n    switch (logLevel) {\n      case 'debug':\n        this._logger.logLevel = LogLevel.DEBUG;\n        break;\n      case 'silent':\n        this._logger.logLevel = LogLevel.SILENT;\n        break;\n      default:\n        this._logger.logLevel = LogLevel.ERROR;\n    }\n  };\n  Object.defineProperty(RemoteConfig.prototype, \"fetchTimeMillis\", {\n    get: function () {\n      return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RemoteConfig.prototype, \"lastFetchStatus\", {\n    get: function () {\n      return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  RemoteConfig.prototype.activate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, lastSuccessfulFetchResponse, activeConfigEtag;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Promise.all([this._storage.getLastSuccessfulFetchResponse(), this._storage.getActiveConfigEtag()])];\n          case 1:\n            _a = _b.sent(), lastSuccessfulFetchResponse = _a[0], activeConfigEtag = _a[1];\n            if (!lastSuccessfulFetchResponse || !lastSuccessfulFetchResponse.config || !lastSuccessfulFetchResponse.eTag || lastSuccessfulFetchResponse.eTag === activeConfigEtag) {\n              // Either there is no successful fetched config, or is the same as current active\n              // config.\n              return [2 /*return*/, false];\n            }\n            return [4 /*yield*/, Promise.all([this._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config), this._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)])];\n          case 2:\n            _b.sent();\n            return [2 /*return*/, true];\n        }\n      });\n    });\n  };\n  RemoteConfig.prototype.ensureInitialized = function () {\n    var _this = this;\n    if (!this._initializePromise) {\n      this._initializePromise = this._storageCache.loadFromStorage().then(function () {\n        _this._isInitializationComplete = true;\n      });\n    }\n    return this._initializePromise;\n  };\n  /**\r\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\r\n   * {@link Settings.fetchTimeoutInSeconds} or\r\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\r\n   */\n  RemoteConfig.prototype.fetch = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var abortSignal, e_1, lastFetchStatus;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            abortSignal = new RemoteConfigAbortSignal();\n            setTimeout(function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n                  abortSignal.abort();\n                  return [2 /*return*/];\n                });\n              });\n            }, this.settings.fetchTimeoutMillis);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 4,, 6]);\n            return [4 /*yield*/, this._client.fetch({\n              cacheMaxAgeMillis: this.settings.minimumFetchIntervalMillis,\n              signal: abortSignal\n            })];\n          case 2:\n            _a.sent();\n            return [4 /*yield*/, this._storageCache.setLastFetchStatus('success')];\n          case 3:\n            _a.sent();\n            return [3 /*break*/, 6];\n          case 4:\n            e_1 = _a.sent();\n            lastFetchStatus = hasErrorCode(e_1, \"fetch-throttle\" /* FETCH_THROTTLE */) ? 'throttle' : 'failure';\n            return [4 /*yield*/, this._storageCache.setLastFetchStatus(lastFetchStatus)];\n          case 5:\n            _a.sent();\n            throw e_1;\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  RemoteConfig.prototype.fetchAndActivate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.fetch()];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, this.activate()];\n        }\n      });\n    });\n  };\n  RemoteConfig.prototype.getAll = function () {\n    var _this = this;\n    return getAllKeys(this._storageCache.getActiveConfig(), this.defaultConfig).reduce(function (allConfigs, key) {\n      allConfigs[key] = _this.getValue(key);\n      return allConfigs;\n    }, {});\n  };\n  RemoteConfig.prototype.getBoolean = function (key) {\n    return this.getValue(key).asBoolean();\n  };\n  RemoteConfig.prototype.getNumber = function (key) {\n    return this.getValue(key).asNumber();\n  };\n  RemoteConfig.prototype.getString = function (key) {\n    return this.getValue(key).asString();\n  };\n  RemoteConfig.prototype.getValue = function (key) {\n    if (!this._isInitializationComplete) {\n      this._logger.debug(\"A value was requested for key \\\"\" + key + \"\\\" before SDK initialization completed.\" + ' Await on ensureInitialized if the intent was to get a previously activated value.');\n    }\n    var activeConfig = this._storageCache.getActiveConfig();\n    if (activeConfig && activeConfig[key] !== undefined) {\n      return new Value('remote', activeConfig[key]);\n    } else if (this.defaultConfig && this.defaultConfig[key] !== undefined) {\n      return new Value('default', String(this.defaultConfig[key]));\n    }\n    this._logger.debug(\"Returning static value for key \\\"\" + key + \"\\\".\" + ' Define a default or remote value if this is unintentional.');\n    return new Value('static');\n  };\n  return RemoteConfig;\n}();\n/**\r\n * Dedupes and returns an array of all the keys of the received objects.\r\n */\nfunction getAllKeys(obj1, obj2) {\n  if (obj1 === void 0) {\n    obj1 = {};\n  }\n  if (obj2 === void 0) {\n    obj2 = {};\n  }\n  return Object.keys(__assign(__assign({}, obj1), obj2));\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\r\n */\nfunction toFirebaseError(event, errorCode) {\n  var originalError = event.target.error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n/**\r\n * A general-purpose store keyed by app + namespace + {@link\r\n * ProjectNamespaceKeyFieldValue}.\r\n *\r\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\r\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\r\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\r\n *\r\n * <p>Visible for testing.\r\n */\nvar APP_NAMESPACE_STORE = 'app_namespace_store';\nvar DB_NAME = 'firebase_remote_config';\nvar DB_VERSION = 1;\n// Visible for testing.\nfunction openDatabase() {\n  return new Promise(function (resolve, reject) {\n    var request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = function (event) {\n      reject(toFirebaseError(event, \"storage-open\" /* STORAGE_OPEN */));\n    };\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onupgradeneeded = function (event) {\n      var db = event.target.result;\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (event.oldVersion) {\n        case 0:\n          db.createObjectStore(APP_NAMESPACE_STORE, {\n            keyPath: 'compositeKey'\n          });\n      }\n    };\n  });\n}\n/**\r\n * Abstracts data persistence.\r\n */\nvar Storage = /** @class */function () {\n  /**\r\n   * @param appId enables storage segmentation by app (ID + name).\r\n   * @param appName enables storage segmentation by app (ID + name).\r\n   * @param namespace enables storage segmentation by namespace.\r\n   */\n  function Storage(appId, appName, namespace, openDbPromise) {\n    if (openDbPromise === void 0) {\n      openDbPromise = openDatabase();\n    }\n    this.appId = appId;\n    this.appName = appName;\n    this.namespace = namespace;\n    this.openDbPromise = openDbPromise;\n  }\n  Storage.prototype.getLastFetchStatus = function () {\n    return this.get('last_fetch_status');\n  };\n  Storage.prototype.setLastFetchStatus = function (status) {\n    return this.set('last_fetch_status', status);\n  };\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  Storage.prototype.getLastSuccessfulFetchTimestampMillis = function () {\n    return this.get('last_successful_fetch_timestamp_millis');\n  };\n  Storage.prototype.setLastSuccessfulFetchTimestampMillis = function (timestamp) {\n    return this.set('last_successful_fetch_timestamp_millis', timestamp);\n  };\n  Storage.prototype.getLastSuccessfulFetchResponse = function () {\n    return this.get('last_successful_fetch_response');\n  };\n  Storage.prototype.setLastSuccessfulFetchResponse = function (response) {\n    return this.set('last_successful_fetch_response', response);\n  };\n  Storage.prototype.getActiveConfig = function () {\n    return this.get('active_config');\n  };\n  Storage.prototype.setActiveConfig = function (config) {\n    return this.set('active_config', config);\n  };\n  Storage.prototype.getActiveConfigEtag = function () {\n    return this.get('active_config_etag');\n  };\n  Storage.prototype.setActiveConfigEtag = function (etag) {\n    return this.set('active_config_etag', etag);\n  };\n  Storage.prototype.getThrottleMetadata = function () {\n    return this.get('throttle_metadata');\n  };\n  Storage.prototype.setThrottleMetadata = function (metadata) {\n    return this.set('throttle_metadata', metadata);\n  };\n  Storage.prototype.deleteThrottleMetadata = function () {\n    return this.delete('throttle_metadata');\n  };\n  Storage.prototype.get = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var db;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.openDbPromise];\n          case 1:\n            db = _a.sent();\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              var transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n              var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n              var compositeKey = _this.createCompositeKey(key);\n              try {\n                var request = objectStore.get(compositeKey);\n                request.onerror = function (event) {\n                  reject(toFirebaseError(event, \"storage-get\" /* STORAGE_GET */));\n                };\n                request.onsuccess = function (event) {\n                  var result = event.target.result;\n                  if (result) {\n                    resolve(result.value);\n                  } else {\n                    resolve(undefined);\n                  }\n                };\n              } catch (e) {\n                reject(ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\n                  originalErrorMessage: e && e.message\n                }));\n              }\n            })];\n        }\n      });\n    });\n  };\n  Storage.prototype.set = function (key, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var db;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.openDbPromise];\n          case 1:\n            db = _a.sent();\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n              var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n              var compositeKey = _this.createCompositeKey(key);\n              try {\n                var request = objectStore.put({\n                  compositeKey: compositeKey,\n                  value: value\n                });\n                request.onerror = function (event) {\n                  reject(toFirebaseError(event, \"storage-set\" /* STORAGE_SET */));\n                };\n                request.onsuccess = function () {\n                  resolve();\n                };\n              } catch (e) {\n                reject(ERROR_FACTORY.create(\"storage-set\" /* STORAGE_SET */, {\n                  originalErrorMessage: e && e.message\n                }));\n              }\n            })];\n        }\n      });\n    });\n  };\n  Storage.prototype.delete = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var db;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.openDbPromise];\n          case 1:\n            db = _a.sent();\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n              var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n              var compositeKey = _this.createCompositeKey(key);\n              try {\n                var request = objectStore.delete(compositeKey);\n                request.onerror = function (event) {\n                  reject(toFirebaseError(event, \"storage-delete\" /* STORAGE_DELETE */));\n                };\n                request.onsuccess = function () {\n                  resolve();\n                };\n              } catch (e) {\n                reject(ERROR_FACTORY.create(\"storage-delete\" /* STORAGE_DELETE */, {\n                  originalErrorMessage: e && e.message\n                }));\n              }\n            })];\n        }\n      });\n    });\n  };\n  // Facilitates composite key functionality (which is unsupported in IE).\n  Storage.prototype.createCompositeKey = function (key) {\n    return [this.appId, this.appName, this.namespace, key].join();\n  };\n  return Storage;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\r\n */\nvar StorageCache = /** @class */function () {\n  function StorageCache(storage) {\n    this.storage = storage;\n  }\n  /**\r\n   * Memory-only getters\r\n   */\n  StorageCache.prototype.getLastFetchStatus = function () {\n    return this.lastFetchStatus;\n  };\n  StorageCache.prototype.getLastSuccessfulFetchTimestampMillis = function () {\n    return this.lastSuccessfulFetchTimestampMillis;\n  };\n  StorageCache.prototype.getActiveConfig = function () {\n    return this.activeConfig;\n  };\n  /**\r\n   * Read-ahead getter\r\n   */\n  StorageCache.prototype.loadFromStorage = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var lastFetchStatusPromise, lastSuccessfulFetchTimestampMillisPromise, activeConfigPromise, lastFetchStatus, lastSuccessfulFetchTimestampMillis, activeConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            lastFetchStatusPromise = this.storage.getLastFetchStatus();\n            lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n            activeConfigPromise = this.storage.getActiveConfig();\n            return [4 /*yield*/, lastFetchStatusPromise];\n          case 1:\n            lastFetchStatus = _a.sent();\n            if (lastFetchStatus) {\n              this.lastFetchStatus = lastFetchStatus;\n            }\n            return [4 /*yield*/, lastSuccessfulFetchTimestampMillisPromise];\n          case 2:\n            lastSuccessfulFetchTimestampMillis = _a.sent();\n            if (lastSuccessfulFetchTimestampMillis) {\n              this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n            }\n            return [4 /*yield*/, activeConfigPromise];\n          case 3:\n            activeConfig = _a.sent();\n            if (activeConfig) {\n              this.activeConfig = activeConfig;\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Write-through setters\r\n   */\n  StorageCache.prototype.setLastFetchStatus = function (status) {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  };\n  StorageCache.prototype.setLastSuccessfulFetchTimestampMillis = function (timestampMillis) {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  };\n  StorageCache.prototype.setActiveConfig = function (activeConfig) {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  };\n  return StorageCache;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise(function (resolve, reject) {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    var timeout = setTimeout(resolve, backoffMillis);\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(function () {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(ERROR_FACTORY.create(\"fetch-throttle\" /* FETCH_THROTTLE */, {\n        throttleEndTimeMillis: throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  var httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Decorates a Client with retry logic.\r\n *\r\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\r\n * responses (because the SDK has no use for error responses).\r\n */\nvar RetryingClient = /** @class */function () {\n  function RetryingClient(client, storage) {\n    this.client = client;\n    this.storage = storage;\n  }\n  RetryingClient.prototype.fetch = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var throttleMetadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.storage.getThrottleMetadata()];\n          case 1:\n            throttleMetadata = _a.sent() || {\n              backoffCount: 0,\n              throttleEndTimeMillis: Date.now()\n            };\n            return [2 /*return*/, this.attemptFetch(request, throttleMetadata)];\n        }\n      });\n    });\n  };\n  /**\r\n   * A recursive helper for attempting a fetch request repeatedly.\r\n   *\r\n   * @throws any non-retriable errors.\r\n   */\n  RetryingClient.prototype.attemptFetch = function (request, _a) {\n    var throttleEndTimeMillis = _a.throttleEndTimeMillis,\n      backoffCount = _a.backoffCount;\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1, throttleMetadata;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            // Starts with a (potentially zero) timeout to support resumption from stored state.\n            // Ensures the throttle end time is honored if the last attempt timed out.\n            // Note the SDK will never make a request if the fetch timeout expires at this point.\n            return [4 /*yield*/, setAbortableTimeout(request.signal, throttleEndTimeMillis)];\n          case 1:\n            // Starts with a (potentially zero) timeout to support resumption from stored state.\n            // Ensures the throttle end time is honored if the last attempt timed out.\n            // Note the SDK will never make a request if the fetch timeout expires at this point.\n            _b.sent();\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 5,, 7]);\n            return [4 /*yield*/, this.client.fetch(request)];\n          case 3:\n            response = _b.sent();\n            // Note the SDK only clears throttle state if response is success or non-retriable.\n            return [4 /*yield*/, this.storage.deleteThrottleMetadata()];\n          case 4:\n            // Note the SDK only clears throttle state if response is success or non-retriable.\n            _b.sent();\n            return [2 /*return*/, response];\n          case 5:\n            e_1 = _b.sent();\n            if (!isRetriableError(e_1)) {\n              throw e_1;\n            }\n            throttleMetadata = {\n              throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),\n              backoffCount: backoffCount + 1\n            };\n            // Persists state.\n            return [4 /*yield*/, this.storage.setThrottleMetadata(throttleMetadata)];\n          case 6:\n            // Persists state.\n            _b.sent();\n            return [2 /*return*/, this.attemptFetch(request, throttleMetadata)];\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return RetryingClient;\n}();\nvar name = \"@firebase/remote-config\";\nvar version = \"0.1.31\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerRemoteConfig(firebaseInstance) {\n  firebaseInstance.INTERNAL.registerComponent(new Component('remoteConfig', remoteConfigFactory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\n  firebaseInstance.registerVersion(name, version);\n  function remoteConfigFactory(container, namespace) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    var installations = container.getProvider('installations').getImmediate();\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(\"registration-window\" /* REGISTRATION_WINDOW */);\n    }\n    // Normalizes optional inputs.\n    var _a = app.options,\n      projectId = _a.projectId,\n      apiKey = _a.apiKey,\n      appId = _a.appId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(\"registration-project-id\" /* REGISTRATION_PROJECT_ID */);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(\"registration-api-key\" /* REGISTRATION_API_KEY */);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"registration-app-id\" /* REGISTRATION_APP_ID */);\n    }\n    namespace = namespace || 'firebase';\n    var storage = new Storage(appId, app.name, namespace);\n    var storageCache = new StorageCache(storage);\n    var logger = new Logger(name);\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = LogLevel.ERROR;\n    var restClient = new RestClient(installations,\n    // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n    firebaseInstance.SDK_VERSION, namespace, projectId, apiKey, appId);\n    var retryingClient = new RetryingClient(restClient, storage);\n    var cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);\n    var remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger);\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    remoteConfigInstance.ensureInitialized();\n    return remoteConfigInstance;\n  }\n}\nregisterRemoteConfig(firebase);\nexport { registerRemoteConfig };","map":null,"metadata":{},"sourceType":"module"}